---
import type { Locale, NavigationDictionary } from "@utils/i18n";
import {
  DEFAULT_LOCALE,
  getTranslations,
  buildLocalizedPath,
  getAlternateLocale
} from "@utils/i18n";

type NavKey = keyof NavigationDictionary["links"];

interface NavDefinition {
  key: NavKey;
  href: string;
  isBeta?: boolean;
  matches: (path: string) => boolean;
}

interface NavLink extends NavDefinition {
  label: string;
}

interface Props {
  currentPath?: string;
  locale?: Locale;
  navigation?: NavigationDictionary;
}

const {
  currentPath = "",
  locale = DEFAULT_LOCALE,
  navigation
} = Astro.props as Props;

const navCopy = navigation ?? getTranslations(DEFAULT_LOCALE).navigation;

const demoMode = (import.meta.env.PUBLIC_DEMO_MODE ?? "false") === "true";
const consoleUrl = (import.meta.env.PUBLIC_CONSOLE_URL ?? "http://localhost:4200").replace(/\/$/, "");

const baseDefinitions: NavDefinition[] = [
  {
    key: "product",
    href: locale === "en" ? "/en" : "/",
    matches: (path) => (locale === "en" ? path === "/en" || path === "/en/" : path === "/")
  },
  {
    key: "prospection",
    href: "/prospection-ia",
    isBeta: true,
    matches: (path) => path.startsWith("/prospection-ia")
  },
  {
    key: "followUp",
    href: "/relance-intelligente",
    isBeta: true,
    matches: (path) => path.startsWith("/relance-intelligente")
  },
  {
    key: "pricing",
    href: "/prix",
    matches: (path) => path.startsWith("/prix")
  },
  {
    key: "security",
    href: "/securite-rgpd",
    matches: (path) => path.startsWith("/securite-rgpd")
  },
  {
    key: "blog",
    href: "/blog",
    matches: (path) => path.startsWith("/blog")
  },
  {
    key: "demo",
    href: locale === "en" ? "/en#demo" : "/#demo",
    matches: () => false
  }
];

const links: NavLink[] = baseDefinitions
  .map((definition) => ({
    ...definition,
    label: navCopy.links[definition.key] ?? definition.key
  }))
  .concat(
    demoMode
      ? [
          {
            key: "launchDemo",
            href: `${consoleUrl}/login?demo=1`,
            label: navCopy.links.launchDemo,
            matches: () => false
          }
        ]
      : []
  );

const isActive = (link: NavLink) => {
  if (!currentPath) return false;
  return link.matches(currentPath);
};

const alternateLocale = getAlternateLocale(locale);
const languageToggleHref = buildLocalizedPath(currentPath || "/", alternateLocale);
---
<header class="pointer-events-none sticky top-4 z-[var(--z-nav)] flex justify-center px-4 lg:top-6">
  <div class="pointer-events-auto w-full max-w-6xl">
    <nav
      data-nav-shell
      class="glass relative flex w-full items-center justify-between gap-4 rounded-2xl px-4 py-2 text-sm shadow-soft transition-colors duration-200 data-[scrolled='true']:bg-white/5 data-[scrolled='true']:backdrop-blur-md md:px-6 md:py-3"
    >
      <div class="absolute inset-0 -z-10 bg-[radial-gradient(120%_120%_at_0%_0%,rgba(56,189,248,0.18),transparent),radial-gradient(120%_140%_at_100%_50%,rgba(167,139,250,0.24),transparent)]"></div>
      <a href={locale === "en" ? "/en" : "/"} class="group flex items-center gap-3" aria-label={navCopy.logoLabel}>
        <span class="sr-only">{navCopy.logoLabel}</span>
        <svg
          class="w-[180px] max-w-full md:w-[220px]"
          width="220"
          height="56"
          viewBox="0 0 320 140"
          xmlns="http://www.w3.org/2000/svg"
          role="img"
          aria-hidden="true"
        >
          <defs>
            <linearGradient id="plFlowNav" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stop-color="#28C0B0" />
              <stop offset="100%" stop-color="#7CE4D9" />
            </linearGradient>
          </defs>
          <g transform="translate(20,28)">
            <path d="M10 40 C60 10, 90 70, 140 40 S220 10, 260 40" stroke="url(#plFlowNav)" stroke-width="6" fill="none" stroke-linecap="round" />
            <circle cx="60" cy="25" r="5" fill="#28C0B0" />
            <circle cx="140" cy="40" r="5" fill="#28C0B0" />
            <circle cx="220" cy="25" r="5" fill="#28C0B0" />
            <path d="M260 40 l14 -8 v16 z" fill="#7CE4D9" />
          </g>
        </svg>
      </a>
      <button
        type="button"
        class="inline-flex h-11 w-11 items-center justify-center rounded-full border border-line/40 bg-surface/70 on-surface transition hover:text-primary md:hidden"
        data-nav-toggle
        aria-label={navCopy.openMenu}
        aria-expanded="false"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round">
          <path d="M4 8H20M4 12H20M10 16H20" />
        </svg>
      </button>
      <div class="hidden flex-1 items-center justify-end gap-4 md:flex">
        <div
          class="glass flex max-w-full flex-1 justify-end rounded-2xl px-1 py-1 shadow-soft"
        >
          <ul
            class="flex max-w-full flex-1 snap-x snap-mandatory items-center gap-1 overflow-x-auto rounded-2xl px-1 py-1 flex-wrap md:flex-nowrap md:px-2"
            style="scrollbar-gutter: stable;"
          >
          {links.map((link) => (
            <li key={link.href} class="snap-center">
              <a
                href={link.href}
                class:list={{
                  "group relative inline-flex items-center gap-2 rounded-xl px-3 md:px-4 py-2 text-[11px] font-semibold uppercase tracking-[0.24em] transition-colors duration-200": true,
                  "on-surface": !isActive(link),
                  "on-surface-strong ring-1 ring-white/10": isActive(link)
                }}
                data-nav-link
                aria-current={isActive(link) ? "page" : undefined}
                data-active={isActive(link) ? "true" : "false"}
              >
                <span class="relative">{link.label}</span>
                {link.isBeta && (
                  <span class="rounded-full border border-primary/40 bg-primary/12 px-2 py-0.5 text-[9px] font-semibold uppercase tracking-[0.32em] text-primary/90">
                    {navCopy.beta}
                  </span>
                )}
                <span
                  class="pointer-events-none absolute inset-x-2 bottom-1 h-px origin-center scale-x-0 bg-current transition-transform duration-200 ease-out group-hover:scale-x-100 group-data-[active='true']:scale-x-100"
                ></span>
              </a>
            </li>
          ))}
          </ul>
        </div>
        <a
          href={languageToggleHref}
          class="inline-flex h-11 items-center rounded-2xl border border-line/25 bg-surface/60 px-4 text-[11px] font-semibold uppercase tracking-[0.24em] text-primary transition hover:text-primary/80 focus:outline-none focus-visible:ring-2 focus-visible:ring-primary/60"
          aria-label={`${navCopy.language.label}: ${navCopy.language.switchTo}`}
        >
          {navCopy.language.switchTo}
        </a>
      </div>
    </nav>
  </div>
  <div class="pointer-events-none fixed inset-x-0 top-[88px] z-40 px-4 md:hidden" data-nav-drawer hidden>
    <div class="pointer-events-auto rounded-3xl border border-line/30 bg-surfaceStrong/95 p-6 shadow-soft backdrop-blur">
      <ul class="grid gap-4 text-base on-surface">
        {links.map((link) => (
          <li key={link.href}>
            <a
              href={link.href}
              class="flex items-center justify-between gap-2"
              data-nav-link
              aria-current={isActive(link) ? "page" : undefined}
            >
              <span>{link.label}</span>
              {link.isBeta && (
                <span class="rounded-full border border-primary/35 bg-primary/12 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-[0.32em] text-primary/90">
                  {navCopy.beta}
                </span>
              )}
            </a>
          </li>
        ))}
      </ul>
      <div class="mt-6 flex justify-end border-t border-line/20 pt-6">
        <a
          href={languageToggleHref}
          class="inline-flex h-10 items-center justify-center rounded-2xl border border-line/30 px-4 text-[11px] font-semibold uppercase tracking-[0.24em] text-primary transition hover:text-primary/80 focus:outline-none focus-visible:ring-2 focus-visible:ring-primary/60"
          aria-label={`${navCopy.language.label}: ${navCopy.language.switchTo}`}
        >
          {navCopy.language.switchTo}
        </a>
      </div>
    </div>
  </div>
</header>
<script is:inline>
  (() => {
    const toggle = document.querySelector("[data-nav-toggle]");
    const drawer = document.querySelector("[data-nav-drawer]");
    const links = Array.from(document.querySelectorAll("[data-nav-link]"));
    if (!toggle || !drawer) return;

    const close = () => {
      drawer.hidden = true;
      toggle.setAttribute("aria-expanded", "false");
    };

    toggle.addEventListener("click", () => {
      const willOpen = drawer.hidden;
      drawer.hidden = !willOpen;
      toggle.setAttribute("aria-expanded", willOpen ? "true" : "false");
    });

    links.forEach((link) =>
      link.addEventListener("click", () => {
        close();
      })
    );

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        close();
      }
    });
  })();
  (() => {
    const nav = document.querySelector("[data-nav-shell]");
    if (!nav) return;

    const handleScroll = () => {
      const scrolled = window.scrollY > 8;
      nav.setAttribute("data-scrolled", scrolled ? "true" : "false");
    };

    handleScroll();
    window.addEventListener("scroll", handleScroll, { passive: true });
  })();
</script>
