---
import ThemeToggle from "./ThemeToggle.astro";
import NeonBadge from "./NeonBadge.astro";

interface NavLink {
  href: string;
  label: string;
  isBeta?: boolean;
  matches: (path: string) => boolean;
}

interface Props {
  currentPath?: string;
}

const { currentPath = "" } = Astro.props as Props;

const links: NavLink[] = [
  { href: "/", label: "Produit", matches: (path) => path === "/" },
  {
    href: "/prospection-ia",
    label: "Prospection IA",
    isBeta: true,
    matches: (path) => path.startsWith("/prospection-ia")
  },
  {
    href: "/relance-intelligente",
    label: "Relance intelligente",
    isBeta: true,
    matches: (path) => path.startsWith("/relance-intelligente")
  },
  { href: "/prix", label: "Prix", matches: (path) => path.startsWith("/prix") },
  {
    href: "/securite-rgpd",
    label: "Sécurité & RGPD",
    matches: (path) => path.startsWith("/securite-rgpd")
  },
  { href: "/blog", label: "Ressources", matches: (path) => path.startsWith("/blog") },
  { href: "/#demo", label: "Demander une démo", matches: () => false }
];

const isActive = (link: NavLink) => {
  if (!currentPath) return false;
  return link.matches(currentPath);
};
---
<header class="pointer-events-none fixed inset-x-0 top-6 z-50 flex justify-center px-4">
  <nav class="pointer-events-auto glass flex w-full max-w-5xl items-center justify-between gap-6 rounded-full border border-line/35 px-6 py-3 text-sm shadow-soft">
    <a href="/" class="flex items-center gap-2 font-semibold tracking-wide uppercase text-primary">
      <span class="h-2 w-2 rounded-full bg-primary"></span>
      Pipelane
    </a>
    <button
      type="button"
      class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-line/40 bg-surface/60 text-onSurface md:hidden"
      data-nav-toggle
      aria-label="Ouvrir la navigation"
      aria-expanded="false"
    >
      ☰
    </button>
    <div class="hidden items-center gap-4 md:flex">
      <ul class="flex items-center gap-1 rounded-full bg-surfaceOverlay p-1">
        {links.map((link) => (
          <li key={link.href}>
            <a
              href={link.href}
              class:list={{
                "nav-link inline-flex items-center gap-2 rounded-full px-3 py-2 text-xs font-medium uppercase tracking-[0.2em] transition": true,
                "on-surface hover:text-primary": !isActive(link),
                "bg-primary/10 text-primary": isActive(link)
              }}
              data-nav-link
              aria-current={isActive(link) ? "page" : undefined}
            >
              <span>{link.label}</span>
              {link.isBeta && <NeonBadge class="!text-[9px]">BÊTA</NeonBadge>}
            </a>
          </li>
        ))}
      </ul>
      <ThemeToggle />
    </div>
  </nav>
  <div class="pointer-events-none fixed inset-x-0 top-[72px] z-40 px-4 md:hidden" data-nav-drawer hidden>
    <div class="pointer-events-auto glass rounded-3xl border border-line/30 p-6">
      <ul class="grid gap-4 text-base">
        {links.map((link) => (
          <li key={link.href}>
            <a
              href={link.href}
              class="flex items-center justify-between gap-2 on-surface"
              data-nav-link
              aria-current={isActive(link) ? "page" : undefined}
            >
              <span>{link.label}</span>
              {link.isBeta && <NeonBadge class="!text-[10px]">BÊTA</NeonBadge>}
            </a>
          </li>
        ))}
      </ul>
      <div class="mt-6">
        <ThemeToggle />
      </div>
    </div>
  </div>
</header>
<script is:inline>
  (() => {
    const toggle = document.querySelector("[data-nav-toggle]");
    const drawer = document.querySelector("[data-nav-drawer]");
    const links = Array.from(document.querySelectorAll("[data-nav-link]"));
    if (!toggle || !drawer) return;

    const close = () => {
      drawer.hidden = true;
      toggle.setAttribute("aria-expanded", "false");
    };

    toggle.addEventListener("click", () => {
      const willOpen = drawer.hidden;
      drawer.hidden = !willOpen;
      toggle.setAttribute("aria-expanded", willOpen ? "true" : "false");
    });

    links.forEach((link) =>
      link.addEventListener("click", () => {
        close();
      })
    );

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        close();
      }
    });
  })();
</script>
