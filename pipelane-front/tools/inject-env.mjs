import fs from 'fs';
import path from 'path';
import url from 'url';
import dotenv from 'dotenv';

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
const root = path.resolve(__dirname, '..');
dotenv.config({ path: path.join(root, '.env') });

const rawApiBase = process.env.API_BASE_URL?.trim();
let apiBase = rawApiBase && rawApiBase.length > 0 ? rawApiBase : 'https://localhost:56667';
if (/^http:\/\/localhost(:\d+)?/i.test(apiBase)) {
  apiBase = apiBase.replace(/^http:\/\//i, 'https://');
}
const demoMode = String(process.env.DEMO_MODE ?? 'false').toLowerCase() === 'true';
const mapboxToken = process.env.MAPBOX_TOKEN?.trim() ?? '';
const outDir = path.join(root, 'src', 'app', 'core');
const outFile = path.join(outDir, 'env.generated.ts');
const serialize = (value) => JSON.stringify(value ?? '');
const content = `// AUTO-GENERATED by tools/inject-env.mjs\nexport const API_BASE_URL = ${serialize(apiBase)};\nexport const DEMO_MODE = ${demoMode};\nexport const MAPBOX_TOKEN = ${serialize(mapboxToken)};\n`;

fs.mkdirSync(outDir, { recursive: true });
fs.writeFileSync(outFile, content, 'utf-8');
const tokenStatus = mapboxToken.length > 0 ? 'provided' : 'empty';
console.log(`Generated ${path.relative(root, outFile)} with API_BASE_URL=${apiBase} DEMO_MODE=${demoMode} MAPBOX_TOKEN=${tokenStatus}`);
