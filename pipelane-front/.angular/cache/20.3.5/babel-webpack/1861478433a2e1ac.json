{"ast":null,"code":"import _setFunctionName from \"C:/Users/moham/Documents/DATA/2025/Pipelane/pipelane-front/node_modules/@babel/runtime/helpers/esm/setFunctionName.js\";\nimport { __esDecorate, __runInitializers } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { ChangeDetectionStrategy, Component, ViewChild, inject, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormsModule } from '@angular/forms';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { I18nService } from './core/i18n.service';\nimport { ThemeService } from './core/theme.service';\nlet AppComponent = (_staticBlock => {\n  let _classDecorators = [Component({\n    standalone: true,\n    selector: 'app-root',\n    imports: [RouterOutlet, RouterLink, RouterLinkActive, AsyncPipe, NgIf, NgFor, CommonModule, FormsModule, MatSidenavModule, MatToolbarModule, MatListModule, MatIconModule, MatButtonModule, MatSlideToggleModule, MatFormFieldModule, MatInputModule],\n    animations: [trigger('routeAnimations', [transition('* <=> *', [style({\n      opacity: 0,\n      transform: 'translateY(8px)'\n    }), animate('220ms ease-out', style({\n      opacity: 1,\n      transform: 'translateY(0)'\n    }))])])],\n    template: `\n    <mat-sidenav-container class=\"shell-container\">\n      <mat-sidenav #snav [mode]=\"sidenavMode()\" [opened]=\"opened()\" (openedChange)=\"onOpenedChange($event)\">\n        <div class=\"brand\">Pipelane</div>\n        <mat-nav-list>\n          <a mat-list-item routerLink=\"/analytics\" routerLinkActive=\"active\"><mat-icon>analytics</mat-icon><span>Analytics</span></a>\n          <a mat-list-item routerLink=\"/onboarding\" routerLinkActive=\"active\"><mat-icon>settings</mat-icon><span>Onboarding</span></a>\n          <a mat-list-item routerLink=\"/templates\" routerLinkActive=\"active\"><mat-icon>view_list</mat-icon><span>Templates</span></a>\n          <a mat-list-item routerLink=\"/contacts\" routerLinkActive=\"active\"><mat-icon>people</mat-icon><span>Contacts</span></a>\n          <a mat-list-item routerLink=\"/campaigns\" routerLinkActive=\"active\"><mat-icon>flag</mat-icon><span>Campaigns</span></a>\n          <a mat-list-item routerLink=\"/settings\" routerLinkActive=\"active\"><mat-icon>tune</mat-icon><span>Settings</span></a>\n        </mat-nav-list>\n      </mat-sidenav>\n\n      <mat-sidenav-content>\n        <mat-toolbar class=\"toolbar\">\n          <button mat-icon-button (click)=\"toggleSidenav()\" aria-label=\"Toggle sidenav\"><mat-icon>menu</mat-icon></button>\n          <span class=\"title\">Pipelane Console</span>\n          <span class=\"spacer\"></span>\n          <mat-form-field appearance=\"outline\" class=\"search\" floatLabel=\"never\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search\" [(ngModel)]=\"search\" />\n          </mat-form-field>\n          <mat-slide-toggle\n            [checked]=\"theme() === 'dark'\"\n            (change)=\"toggleTheme()\"\n            aria-label=\"Toggle dark mode\">\n          </mat-slide-toggle>\n          <select class=\"lang\" [value]=\"lang()\" (change)=\"changeLang($event)\">\n            <option value=\"en\">EN</option>\n            <option value=\"fr\">FR</option>\n          </select>\n        </mat-toolbar>\n\n        <main class=\"content\" [@routeAnimations]=\"outlet.activatedRoute?.routeConfig?.path\">\n          <router-outlet #outlet=\"outlet\"></router-outlet>\n        </main>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  let _sidenav_decorators;\n  let _sidenav_initializers = [];\n  let _sidenav_extraInitializers = [];\n  var AppComponent = (class {\n    constructor() {\n      this.i18n = inject(I18nService);\n      this.themeSvc = inject(ThemeService);\n      this.bp = inject(BreakpointObserver);\n      this.sidenav = __runInitializers(this, _sidenav_initializers, void 0);\n      this.lang = (__runInitializers(this, _sidenav_extraInitializers), this.i18n.lang);\n      this.theme = this.themeSvc.theme;\n      this.search = '';\n      this.opened = signal(JSON.parse(localStorage.getItem('snav_opened') ?? 'true'), ...(ngDevMode ? [{\n        debugName: \"opened\"\n      }] : []));\n      this.sidenavMode = signal('side', ...(ngDevMode ? [{\n        debugName: \"sidenavMode\"\n      }] : []));\n      this.bp.observe([Breakpoints.Medium, Breakpoints.Small, Breakpoints.Handset]).pipe(takeUntilDestroyed()).subscribe(state => {\n        const isHandset = state.breakpoints[Breakpoints.Handset] || state.breakpoints[Breakpoints.Small];\n        this.sidenavMode.set(isHandset ? 'over' : 'side');\n        if (isHandset) {\n          this.opened.set(false);\n        } else {\n          const stored = JSON.parse(localStorage.getItem('snav_opened') ?? 'true');\n          this.opened.set(stored);\n        }\n      });\n    }\n    setLang(l) {\n      this.i18n.setLang(l);\n    }\n    toggleTheme() {\n      this.themeSvc.toggle();\n    }\n    changeLang(event) {\n      const value = event.target.value;\n      this.setLang(value);\n    }\n    toggleSidenav() {\n      if (this.sidenavMode() === 'over') {\n        this.sidenav?.toggle();\n      } else {\n        this.onOpenedChange(!this.opened());\n      }\n    }\n    onOpenedChange(val) {\n      this.opened.set(val);\n      localStorage.setItem('snav_opened', JSON.stringify(val));\n    }\n    static #_ = _staticBlock = () => (_setFunctionName(this, \"AppComponent\"), _classThis = this, (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      _sidenav_decorators = [ViewChild('snav')];\n      __esDecorate(null, null, _sidenav_decorators, {\n        kind: \"field\",\n        name: \"sidenav\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"sidenav\" in obj,\n          get: obj => obj.sidenav,\n          set: (obj, value) => {\n            obj.sidenav = value;\n          }\n        },\n        metadata: _metadata\n      }, _sidenav_initializers, _sidenav_extraInitializers);\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      AppComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    })(), this);\n  }, _staticBlock());\n  return AppComponent = _classThis;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}