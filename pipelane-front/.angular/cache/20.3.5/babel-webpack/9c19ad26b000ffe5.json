{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { environment } from './environment';\nimport * as i0 from \"@angular/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class ApiService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.base = environment.API_BASE_URL;\n    }\n    headers(tenantId) {\n      const headers = {};\n      if (tenantId) headers['X-Tenant-Id'] = tenantId;\n      return headers;\n    }\n    saveChannelSettings(body, tenantId) {\n      return this.http.post(`${this.base}/onboarding/channel-settings`, body, {\n        headers: this.headers(tenantId)\n      });\n    }\n    getTemplates(tenantId) {\n      return this.http.get(`${this.base}/templates`, {\n        headers: this.headers(tenantId)\n      });\n    }\n    refreshTemplates(tenantId) {\n      return this.http.post(`${this.base}/templates/refresh`, {}, {\n        headers: this.headers(tenantId)\n      });\n    }\n    searchContacts(q, page = 1, size = 20, tenantId) {\n      const params = new HttpParams().set('search', q).set('page', page.toString()).set('size', size.toString());\n      return this.http.get(`${this.base}/contacts`, {\n        params,\n        headers: this.headers(tenantId)\n      });\n    }\n    getConversation(contactId, last = 50, tenantId) {\n      const params = new HttpParams().set('last', last.toString());\n      return this.http.get(`${this.base}/conversations/${contactId}`, {\n        params,\n        headers: this.headers(tenantId)\n      });\n    }\n    sendMessage(body, tenantId) {\n      return this.http.post(`${this.base}/messages/send`, body, {\n        headers: this.headers(tenantId)\n      });\n    }\n    createCampaign(body, tenantId) {\n      return this.http.post(`${this.base}/campaigns`, body, {\n        headers: this.headers(tenantId)\n      });\n    }\n    getCampaign(id, tenantId) {\n      return this.http.get(`${this.base}/campaigns/${id}`, {\n        headers: this.headers(tenantId)\n      });\n    }\n    getAnalyticsOverview(from, to, tenantId) {\n      const params = new HttpParams({\n        fromObject: {\n          from: from ?? '',\n          to: to ?? ''\n        }\n      });\n      return this.http.get(`${this.base}/analytics/overview`, {\n        params,\n        headers: this.headers(tenantId)\n      });\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}