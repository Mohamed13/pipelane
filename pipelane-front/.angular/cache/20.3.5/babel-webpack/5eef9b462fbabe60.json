{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { effect, inject, signal } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { catchError, of } from 'rxjs';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { ApiService } from '../../core/api.service';\nimport { ThemeService } from '../../core/theme.service';\nimport { KpiCardComponent } from '../../shared/ui/kpi-card.component';\nimport { ChartCardComponent } from '../../shared/ui/chart-card.component';\nimport { RevealOnScrollDirective } from '../../shared/ui/reveal-on-scroll.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/card\";\nimport * as i2 from \"@angular/material/table\";\nimport * as i3 from \"@angular/material/paginator\";\nimport * as i4 from \"@angular/material/sort\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = () => [5, 10, 20];\nfunction AnalyticsOverviewComponent_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Channel\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AnalyticsOverviewComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, row_r1.channel));\n  }\n}\nfunction AnalyticsOverviewComponent_th_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Sent\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AnalyticsOverviewComponent_td_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(row_r2.sent);\n  }\n}\nfunction AnalyticsOverviewComponent_th_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Delivered\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AnalyticsOverviewComponent_td_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r3 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(row_r3.delivered);\n  }\n}\nfunction AnalyticsOverviewComponent_th_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Opened\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AnalyticsOverviewComponent_td_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(row_r4.opened);\n  }\n}\nfunction AnalyticsOverviewComponent_th_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Failed/Bounced\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AnalyticsOverviewComponent_td_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r5 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(row_r5.failed + row_r5.bounced);\n  }\n}\nfunction AnalyticsOverviewComponent_tr_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 27);\n  }\n}\nfunction AnalyticsOverviewComponent_tr_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 28);\n  }\n}\nexport let AnalyticsOverviewComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AnalyticsOverviewComponent {\n    constructor() {\n      this.api = inject(ApiService);\n      this.theme = inject(ThemeService).theme;\n      this.analytics$ = this.api.getDeliveryAnalytics().pipe(catchError(() => of(null)));\n      this.analytics = toSignal(this.analytics$, {\n        initialValue: null\n      });\n      this.table = new MatTableDataSource([]);\n      this.displayedColumns = ['channel', 'sent', 'delivered', 'opened', 'failed'];\n      this.totalMessages = signal(0, ...(ngDevMode ? [{\n        debugName: \"totalMessages\"\n      }] : []));\n      this.sentCount = signal(0, ...(ngDevMode ? [{\n        debugName: \"sentCount\"\n      }] : []));\n      this.deliveredCount = signal(0, ...(ngDevMode ? [{\n        debugName: \"deliveredCount\"\n      }] : []));\n      this.openedCount = signal(0, ...(ngDevMode ? [{\n        debugName: \"openedCount\"\n      }] : []));\n      this.failedCount = signal(0, ...(ngDevMode ? [{\n        debugName: \"failedCount\"\n      }] : []));\n      this.lineData = createLineData(emptyTotals());\n      this.barData = createBarData([]);\n      this.donutData = createDonutData(emptyTotals());\n      this.chartOptions = createChartOptions();\n      this.lastTotals = emptyTotals();\n      effect(() => {\n        this.theme();\n        this.refreshCharts();\n      });\n      effect(() => {\n        const snapshot = this.analytics();\n        if (!snapshot) {\n          return;\n        }\n        this.applyAnalytics(snapshot);\n      });\n    }\n    ngAfterViewInit() {\n      this.table.paginator = this.paginator;\n      this.table.sort = this.sort;\n    }\n    applyAnalytics(snapshot) {\n      const totals = snapshot.totals ?? emptyTotals();\n      this.lastTotals = totals;\n      const total = Object.values(totals).reduce((acc, value) => acc + value, 0);\n      this.totalMessages.set(total);\n      this.sentCount.set(totals.sent);\n      this.deliveredCount.set(totals.delivered);\n      this.openedCount.set(totals.opened);\n      this.failedCount.set(totals.failed + totals.bounced);\n      const rows = (snapshot.byChannel ?? []).map(mapChannelRow);\n      this.table.data = rows;\n      this.refreshCharts();\n    }\n    refreshCharts() {\n      const totals = this.lastTotals;\n      const rows = this.table.data;\n      this.chartOptions = createChartOptions();\n      this.lineData = createLineData(totals);\n      this.barData = createBarData(rows);\n      this.donutData = createDonutData(totals);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AnalyticsOverviewComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AnalyticsOverviewComponent)();\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AnalyticsOverviewComponent,\n      selectors: [[\"pl-analytics-overview\"]],\n      viewQuery: function AnalyticsOverviewComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatPaginator, 5);\n          i0.ɵɵviewQuery(MatSort, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        }\n      },\n      decls: 35,\n      vars: 21,\n      consts: [[\"plRevealOnScroll\", \"\", 1, \"grid-responsive\"], [\"label\", \"Total Messages\", 3, \"value\"], [\"label\", \"Sent\", 3, \"value\"], [\"label\", \"Delivered\", 3, \"value\"], [\"label\", \"Opened\", 3, \"value\"], [\"label\", \"Failed\", 3, \"value\"], [\"plRevealOnScroll\", \"\", 1, \"grid-responsive\", \"charts\"], [\"title\", \"Message Funnel\", 3, \"type\", \"data\", \"options\"], [\"title\", \"Channel Performance\", 3, \"type\", \"data\", \"options\"], [\"title\", \"Status Breakdown\", 3, \"type\", \"data\", \"options\"], [\"plRevealOnScroll\", \"\"], [1, \"surface-card\"], [1, \"table-header\"], [1, \"table-wrapper\"], [\"mat-table\", \"\", \"matSort\", \"\", 1, \"mat-elevation-z1\", 3, \"dataSource\"], [\"matColumnDef\", \"channel\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"sent\"], [\"matColumnDef\", \"delivered\"], [\"matColumnDef\", \"opened\"], [\"matColumnDef\", \"failed\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"class\", \"table-row\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"pageSize\", \"pageSizeOptions\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 1, \"table-row\"]],\n      template: function AnalyticsOverviewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"section\", 0);\n          i0.ɵɵelement(1, \"pl-kpi-card\", 1)(2, \"pl-kpi-card\", 2)(3, \"pl-kpi-card\", 3)(4, \"pl-kpi-card\", 4)(5, \"pl-kpi-card\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"section\", 6);\n          i0.ɵɵelement(7, \"pl-chart-card\", 7)(8, \"pl-chart-card\", 8)(9, \"pl-chart-card\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"section\", 10)(11, \"mat-card\", 11)(12, \"div\", 12)(13, \"h3\");\n          i0.ɵɵtext(14, \"Channel Delivery Summary\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 13)(16, \"table\", 14);\n          i0.ɵɵelementContainerStart(17, 15);\n          i0.ɵɵtemplate(18, AnalyticsOverviewComponent_th_18_Template, 2, 0, \"th\", 16)(19, AnalyticsOverviewComponent_td_19_Template, 3, 3, \"td\", 17);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(20, 18);\n          i0.ɵɵtemplate(21, AnalyticsOverviewComponent_th_21_Template, 2, 0, \"th\", 16)(22, AnalyticsOverviewComponent_td_22_Template, 2, 1, \"td\", 17);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(23, 19);\n          i0.ɵɵtemplate(24, AnalyticsOverviewComponent_th_24_Template, 2, 0, \"th\", 16)(25, AnalyticsOverviewComponent_td_25_Template, 2, 1, \"td\", 17);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(26, 20);\n          i0.ɵɵtemplate(27, AnalyticsOverviewComponent_th_27_Template, 2, 0, \"th\", 16)(28, AnalyticsOverviewComponent_td_28_Template, 2, 1, \"td\", 17);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementContainerStart(29, 21);\n          i0.ɵɵtemplate(30, AnalyticsOverviewComponent_th_30_Template, 2, 0, \"th\", 16)(31, AnalyticsOverviewComponent_td_31_Template, 2, 1, \"td\", 17);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵtemplate(32, AnalyticsOverviewComponent_tr_32_Template, 1, 0, \"tr\", 22)(33, AnalyticsOverviewComponent_tr_33_Template, 1, 0, \"tr\", 23);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(34, \"mat-paginator\", 24);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"value\", ctx.totalMessages());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"value\", ctx.sentCount());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"value\", ctx.deliveredCount());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"value\", ctx.openedCount());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"value\", ctx.failedCount());\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"type\", \"line\")(\"data\", ctx.lineData)(\"options\", ctx.chartOptions);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"type\", \"bar\")(\"data\", ctx.barData)(\"options\", ctx.chartOptions);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"type\", \"doughnut\")(\"data\", ctx.donutData)(\"options\", ctx.chartOptions);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"dataSource\", ctx.table);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"pageSize\", 5)(\"pageSizeOptions\", i0.ɵɵpureFunction0(20, _c0));\n        }\n      },\n      dependencies: [CommonModule, MatCardModule, i1.MatCard, MatTableModule, i2.MatTable, i2.MatHeaderCellDef, i2.MatHeaderRowDef, i2.MatColumnDef, i2.MatCellDef, i2.MatRowDef, i2.MatHeaderCell, i2.MatCell, i2.MatHeaderRow, i2.MatRow, MatPaginatorModule, i3.MatPaginator, MatSortModule, i4.MatSort, i4.MatSortHeader, KpiCardComponent, ChartCardComponent, RevealOnScrollDirective, i5.TitleCasePipe],\n      styles: [\".charts[_ngcontent-%COMP%]{margin-top:var(--space-5)}.table-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:var(--space-3)}.table-wrapper[_ngcontent-%COMP%]{overflow-x:auto}.table-row[_ngcontent-%COMP%]{cursor:pointer;transition:background var(--transition-fast)}.table-row[_ngcontent-%COMP%]:hover{background:var(--color-surface-alt)}[_nghost-%COMP%]     .mat-mdc-table .mat-mdc-row, [_nghost-%COMP%]     .mat-mdc-table .mat-mdc-header-row{height:48px}@media (max-width: 768px){.charts[_ngcontent-%COMP%]{grid-template-columns:1fr}}\"],\n      changeDetection: 0\n    }));\n  }\n  _staticBlock();\n  return AnalyticsOverviewComponent;\n})();\nfunction emptyTotals() {\n  return {\n    queued: 0,\n    sent: 0,\n    delivered: 0,\n    opened: 0,\n    failed: 0,\n    bounced: 0\n  };\n}\nfunction mapChannelRow(entry) {\n  return {\n    channel: entry.channel,\n    queued: entry.queued,\n    sent: entry.sent,\n    delivered: entry.delivered,\n    opened: entry.opened,\n    failed: entry.failed,\n    bounced: entry.bounced\n  };\n}\nfunction cssVar(name) {\n  return getComputedStyle(document.documentElement).getPropertyValue(name).trim();\n}\nfunction rgba(hex, alpha) {\n  if (!hex.startsWith('#') || hex.length < 7) return hex;\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\nfunction createChartOptions() {\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: true,\n        labels: {\n          color: cssVar('--color-text-muted')\n        }\n      },\n      tooltip: {\n        backgroundColor: cssVar('--color-surface'),\n        bodyColor: cssVar('--color-text'),\n        titleColor: cssVar('--color-text'),\n        borderColor: cssVar('--color-border'),\n        borderWidth: 1,\n        displayColors: true\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          color: cssVar('--color-text-muted')\n        },\n        grid: {\n          color: cssVar('--color-border')\n        }\n      },\n      y: {\n        ticks: {\n          color: cssVar('--color-text-muted')\n        },\n        grid: {\n          color: cssVar('--color-border')\n        }\n      }\n    }\n  };\n}\nfunction createLineData(totals) {\n  const primary = cssVar('--color-primary');\n  const warn = cssVar('--color-warn');\n  const labels = ['Queued', 'Sent', 'Delivered', 'Opened', 'Failed', 'Bounced'];\n  const stages = [totals.queued, totals.sent, totals.delivered, totals.opened, totals.failed, totals.bounced];\n  return {\n    labels,\n    datasets: [{\n      data: stages,\n      label: 'Pipeline',\n      borderColor: primary,\n      backgroundColor: rgba(primary, 0.2),\n      fill: true,\n      tension: 0.35\n    }, {\n      data: stages.map((value, idx) => idx >= 4 ? value : 0),\n      label: 'Issues',\n      borderColor: warn,\n      backgroundColor: rgba(warn, 0.15),\n      fill: true,\n      tension: 0.35\n    }]\n  };\n}\nfunction createBarData(rows) {\n  const palette = [cssVar('--color-primary'), '#10b981', cssVar('--color-warn')];\n  const labels = rows.map(r => r.channel.toUpperCase());\n  return {\n    labels,\n    datasets: [{\n      data: rows.map(r => r.sent),\n      label: 'Sent',\n      backgroundColor: palette[0]\n    }, {\n      data: rows.map(r => r.delivered),\n      label: 'Delivered',\n      backgroundColor: palette[1]\n    }, {\n      data: rows.map(r => r.failed + r.bounced),\n      label: 'Failed/Bounced',\n      backgroundColor: palette[2]\n    }]\n  };\n}\nfunction createDonutData(totals) {\n  const failedTotal = totals.failed + totals.bounced;\n  return {\n    labels: ['Queued', 'Sent', 'Delivered', 'Opened', 'Failed/Bounced'],\n    datasets: [{\n      data: [totals.queued, totals.sent, totals.delivered, totals.opened, failedTotal],\n      backgroundColor: [cssVar('--color-surface-alt'), cssVar('--color-primary'), '#10b981', cssVar('--color-accent'), cssVar('--color-warn')],\n      hoverOffset: 6\n    }]\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}