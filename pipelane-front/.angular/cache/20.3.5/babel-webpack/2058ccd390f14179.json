{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { environment } from './environment';\nimport * as i0 from \"@angular/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class ApiService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.auth = inject(AuthService);\n      this.snackbar = inject(MatSnackBar, {\n        optional: true\n      });\n      this.base = environment.API_BASE_URL;\n    }\n    headers(explicitTenantId) {\n      const tenantId = explicitTenantId ?? this.auth.tenantId();\n      return tenantId ? {\n        'X-Tenant-Id': tenantId\n      } : {};\n    }\n    handleError(context) {\n      return error => {\n        const detail = this.extractErrorMessage(error);\n        this.snackbar?.open(`${context}: ${detail}`, 'Dismiss', {\n          duration: 6000\n        });\n        return throwError(() => error);\n      };\n    }\n    extractErrorMessage(error) {\n      if (error.error) {\n        if (typeof error.error === 'string') {\n          return error.error;\n        }\n        if (typeof error.error === 'object') {\n          const candidate = error.error.detail ?? error.error.message ?? error.error.error ?? error.error.title;\n          if (candidate) {\n            return candidate;\n          }\n          try {\n            return JSON.stringify(error.error);\n          } catch {\n            // ignore\n          }\n        }\n      }\n      if (error.status && error.statusText) {\n        return `${error.status} ${error.statusText}`;\n      }\n      return error.message || 'Unexpected error';\n    }\n    saveChannelSettings(body, tenantId) {\n      return this.http.post(`${this.base}/onboarding/channel-settings`, body, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Saving channel settings')));\n    }\n    getTemplates(tenantId) {\n      return this.http.get(`${this.base}/templates`, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Loading templates')));\n    }\n    refreshTemplates(tenantId) {\n      return this.http.post(`${this.base}/templates/refresh`, {}, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Refreshing templates')));\n    }\n    searchContacts(q, page = 1, size = 20, tenantId) {\n      const params = new HttpParams().set('search', q).set('page', page.toString()).set('size', size.toString());\n      return this.http.get(`${this.base}/contacts`, {\n        params,\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Searching contacts')));\n    }\n    getConversation(contactId, last = 50, tenantId) {\n      const params = new HttpParams().set('last', last.toString());\n      return this.http.get(`${this.base}/conversations/${contactId}`, {\n        params,\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Loading conversation')));\n    }\n    sendMessage(body, tenantId) {\n      return this.http.post(`${this.base}/messages/send`, body, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Sending message')));\n    }\n    createCampaign(body, tenantId) {\n      return this.http.post(`${this.base}/campaigns`, body, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Creating campaign')));\n    }\n    getCampaign(id, tenantId) {\n      return this.http.get(`${this.base}/campaigns/${id}`, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Loading campaign')));\n    }\n    getDeliveryAnalytics(from, to, tenantId) {\n      const params = new HttpParams({\n        fromObject: {\n          from: from ?? '',\n          to: to ?? ''\n        }\n      });\n      return this.http.get(`${this.base}/analytics/delivery`, {\n        params,\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Loading delivery analytics')));\n    }\n    previewFollowups(segmentJson, tenantId) {\n      return this.http.post(`${this.base}/followups/preview`, {\n        segmentJson: segmentJson ?? '{}'\n      }, {\n        headers: this.headers(tenantId)\n      }).pipe(catchError(this.handleError('Previewing follow-ups')));\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}