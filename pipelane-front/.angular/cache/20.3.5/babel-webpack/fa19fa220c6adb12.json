{"ast":null,"code":"import _setFunctionName from \"C:/Users/moham/Documents/DATA/2025/Pipelane/pipelane-front/node_modules/@babel/runtime/helpers/esm/setFunctionName.js\";\nimport { __esDecorate, __runInitializers } from \"tslib\";\nimport { CommonModule, JsonPipe } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject, signal, computed } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ApiService } from '../../core/api.service';\nlet TemplatesListComponent = (_staticBlock => {\n  let _classDecorators = [Component({\n    standalone: true,\n    selector: 'pl-templates-list',\n    imports: [CommonModule, JsonPipe, NgIf, MatCardModule, MatExpansionModule, MatButtonModule, MatIconModule, MatChipsModule, MatProgressSpinnerModule],\n    template: `\n    <mat-card class=\"surface-card\">\n      <div class=\"header\">\n        <div>\n          <h2>Templates</h2>\n          <p class=\"body-text-muted\">Manage messaging templates across channels.</p>\n        </div>\n        <button mat-stroked-button color=\"primary\" (click)=\"refresh()\" [disabled]=\"loading()\">\n          <mat-icon>refresh</mat-icon>\n          Refresh\n        </button>\n      </div>\n\n      <mat-progress-spinner *ngIf=\"loading()\" diameter=\"40\" mode=\"indeterminate\"></mat-progress-spinner>\n\n      <ng-container *ngIf=\"!loading()\">\n        <mat-accordion *ngIf=\"templates().length; else empty\">\n          <mat-expansion-panel *ngFor=\"let template of templates()\" class=\"template-panel\">\n            <mat-expansion-panel-header>\n              <mat-panel-title>\n                {{ template.name }}\n              </mat-panel-title>\n              <mat-panel-description>\n                {{ template.channel | titlecase }} Â· {{ template.lang.toUpperCase() }}\n              </mat-panel-description>\n            </mat-expansion-panel-header>\n            <div class=\"chip-row\">\n              <mat-chip color=\"primary\" selected>{{ template.channel }}</mat-chip>\n              <mat-chip>{{ template.lang }}</mat-chip>\n              <mat-chip *ngIf=\"template.isActive\" color=\"accent\" selected>Active</mat-chip>\n              <mat-chip *ngIf=\"template.category\">{{ template.category }}</mat-chip>\n            </div>\n            <pre>{{ template.coreSchemaJson | json }}</pre>\n            <p class=\"body-text-muted small\">Updated {{ template.updatedAtUtc | date: 'medium' }}</p>\n          </mat-expansion-panel>\n        </mat-accordion>\n      </ng-container>\n    </mat-card>\n\n    <ng-template #empty>\n      <div class=\"empty\">\n        <mat-icon>inventory_2</mat-icon>\n        <p>No templates found.</p>\n      </div>\n    </ng-template>\n  `,\n    styles: [`\n      .header { display:flex; justify-content:space-between; align-items:center; margin-bottom: var(--space-4); }\n      .template-panel { border-radius: var(--radius-md); margin-bottom: var(--space-3); }\n      .chip-row { display:flex; gap:var(--space-2); margin-bottom: var(--space-3); flex-wrap:wrap; }\n      pre { background: var(--color-surface-alt); padding: var(--space-3); border-radius: var(--radius-sm); overflow:auto; }\n      .empty { text-align:center; color: var(--color-text-muted); padding: var(--space-6); display:flex; flex-direction:column; gap:var(--space-3); align-items:center; }\n      .empty mat-icon { font-size:3rem; height:auto; width:auto; }\n      mat-progress-spinner { margin: var(--space-5) auto; display:block; }\n      .small { font-size: 0.85rem; }\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var TemplatesListComponent = (class {\n    constructor() {\n      this.api = inject(ApiService);\n      this.templatesSignal = signal([], ...(ngDevMode ? [{\n        debugName: \"templatesSignal\"\n      }] : []));\n      this.loading = signal(true, ...(ngDevMode ? [{\n        debugName: \"loading\"\n      }] : []));\n      this.templates = computed(() => this.templatesSignal(), ...(ngDevMode ? [{\n        debugName: \"templates\"\n      }] : []));\n      this.loadTemplates();\n    }\n    refresh() {\n      this.loading.set(true);\n      this.api.refreshTemplates().subscribe({\n        next: () => this.loadTemplates(false),\n        error: () => {\n          this.loading.set(false);\n        }\n      });\n    }\n    loadTemplates(showSpinner = true) {\n      if (showSpinner) this.loading.set(true);\n      this.api.getTemplates().subscribe({\n        next: templates => {\n          this.templatesSignal.set(templates ?? []);\n          this.loading.set(false);\n        },\n        error: () => {\n          this.templatesSignal.set([]);\n          this.loading.set(false);\n        }\n      });\n    }\n    static #_ = _staticBlock = () => (_setFunctionName(this, \"TemplatesListComponent\"), _classThis = this, (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      TemplatesListComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    })(), this);\n  }, _staticBlock());\n  return TemplatesListComponent = _classThis;\n})();\nexport { TemplatesListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}