{"ast":null,"code":"import { computed, signal, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { environment } from './environment';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.router = inject(Router);\n      this.storageKey = 'pl_token';\n      this.token = signal(localStorage.getItem(this.storageKey), ...(ngDevMode ? [{\n        debugName: \"token\"\n      }] : []));\n      this.tenantId = computed(() => this.decodeTid(this.token()), ...(ngDevMode ? [{\n        debugName: \"tenantId\"\n      }] : []));\n    }\n    login(email, password, tenantId) {\n      return this.http.post(`${environment.API_BASE_URL}/auth/login`, {\n        email,\n        password,\n        tenantId\n      }).subscribe({\n        next: res => {\n          this.token.set(res.token);\n          localStorage.setItem(this.storageKey, res.token);\n          // redirect to analytics on successful login\n          this.router.navigateByUrl('/analytics');\n        },\n        error: () => {\n          // no-op minimal; UI can add feedback later\n        }\n      });\n    }\n    logout() {\n      this.token.set(null);\n      localStorage.removeItem(this.storageKey);\n      this.router.navigateByUrl('/login');\n    }\n    decodeTid(token) {\n      if (!token) return null;\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        return payload['tid'] ?? null;\n      } catch {\n        return null;\n      }\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}